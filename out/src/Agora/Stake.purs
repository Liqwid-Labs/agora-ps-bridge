-- File auto generated by purescript-bridge! --
module Agora.Stake where

import Agora.Proposal (ProposalId, ResultTag)
import Agora.SafeMoney (GTTag)
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Data.Tagged (Tagged)
import GHC.Num.Integer (Integer)
import PlutusLedgerApi.V1.Crypto (PubKeyHash)
import PlutusLedgerApi.V1.Value (AssetClass)
import Prim (Array)

import Prelude

newtype Stake =
    Stake {
      gtClassRef :: Tagged GTTag AssetClass
    , proposalSTClass :: AssetClass
    }

derive instance genericStake :: Generic Stake _
derive instance newtypeStake :: Newtype Stake _

--------------------------------------------------------------------------------
_Stake :: Iso' Stake { gtClassRef :: Tagged GTTag AssetClass, proposalSTClass :: AssetClass}
_Stake = _Newtype

--------------------------------------------------------------------------------
newtype ProposalLock =
    ProposalLock {
      vote :: ResultTag
    , proposalId :: ProposalId
    }

derive instance genericProposalLock :: Generic ProposalLock _
derive instance newtypeProposalLock :: Newtype ProposalLock _

--------------------------------------------------------------------------------
_ProposalLock :: Iso' ProposalLock { vote :: ResultTag, proposalId :: ProposalId}
_ProposalLock = _Newtype

--------------------------------------------------------------------------------
data StakeRedeemer =
    DepositWithdraw (Tagged GTTag Integer)
  | Destroy
  | PermitVote ProposalLock
  | RetractVotes (Array ProposalLock)
  | WitnessStake

derive instance genericStakeRedeemer :: Generic StakeRedeemer _

--------------------------------------------------------------------------------
_DepositWithdraw :: Prism' StakeRedeemer (Tagged GTTag Integer)
_DepositWithdraw = prism' DepositWithdraw f
  where
    f (DepositWithdraw a) = Just $ a
    f _ = Nothing

_Destroy :: Prism' StakeRedeemer Unit
_Destroy = prism' (\_ -> Destroy) f
  where
    f Destroy = Just unit
    f _ = Nothing

_PermitVote :: Prism' StakeRedeemer ProposalLock
_PermitVote = prism' PermitVote f
  where
    f (PermitVote a) = Just $ a
    f _ = Nothing

_RetractVotes :: Prism' StakeRedeemer (Array ProposalLock)
_RetractVotes = prism' RetractVotes f
  where
    f (RetractVotes a) = Just $ a
    f _ = Nothing

_WitnessStake :: Prism' StakeRedeemer Unit
_WitnessStake = prism' (\_ -> WitnessStake) f
  where
    f WitnessStake = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
newtype StakeDatum =
    StakeDatum {
      stakedAmount :: Tagged GTTag Integer
    , owner :: PubKeyHash
    , lockedBy :: Array ProposalLock
    }

derive instance genericStakeDatum :: Generic StakeDatum _
derive instance newtypeStakeDatum :: Newtype StakeDatum _

--------------------------------------------------------------------------------
_StakeDatum :: Iso' StakeDatum { stakedAmount :: Tagged GTTag Integer, owner :: PubKeyHash, lockedBy :: Array ProposalLock}
_StakeDatum = _Newtype

--------------------------------------------------------------------------------
